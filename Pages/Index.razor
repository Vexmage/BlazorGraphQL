@page "/"
@inject HttpClient Http
@using BlazorGraphQL.Models

<div class="home-container">
    <h1 class="text-center">📚 My Library & Anti-Library</h1>
    <p class="text-center subtitle">
        "Read books are far less valuable than unread ones. Your library should contain as much of what you do not know as your financial means allow for."
        <br>— Nassim Nicholas Taleb, *The Black Swan*
    </p>

    <p class="text-center">
        Welcome to my personal book collection—part **Library**, part **Anti-Library**.
        The **Library** consists of books I have read and studied, while the **Anti-Library** represents the vast knowledge I have yet to explore.
    </p>

    @if (FeaturedBook is not null)
    {
        <div class="featured-book card">
            <div class="card-body">
                <h4 class="card-title fw-bold text-primary">📌 Featured Book</h4>
                <h5 class="fw-bold">@FeaturedBook!.Title</h5>
                <p class="text-muted"><i>by @FeaturedBook!.Author</i></p>

                <p><span class="badge bg-info">@FeaturedBook!.Category</span></p>
                <p><span class="badge bg-warning">@FeaturedBook!.Status</span></p>

                <!-- Progress Bar -->
                <div class="progress mt-3">
                    <div class="progress-bar progress-bar-striped progress-bar-animated bg-success"
                         role="progressbar"
                         style="@($"width: {Math.Max(FeaturedBook!.Progress, 5)}%; min-width: 5px;")"
                         aria-valuenow="@FeaturedBook!.Progress"
                         aria-valuemin="0"
                         aria-valuemax="100">
                        @($"{FeaturedBook!.Progress * 100}%")
                    </div>
                </div>

                <div class="mt-3">
                    <a href="/books" class="btn btn-primary">📖 View Collection</a>
                </div>
            </div>
        </div>
    }
    else
    {
        <p class="text-center">No books found. <a href="/books">Start adding books now!</a></p>
    }

    <!-- 📥 Quick Add Book -->
    <div class="text-center mt-4">
        <a href="/add-book" class="btn btn-success btn-lg">➕ Add a New Book</a>
    </div>
</div>

@code {
    private Book? FeaturedBook;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var query = new
            {
                query = @"
                {
                    books(order: { title: ASC }, take: 1) {
                        id
                        title
                        author
                        category
                        status
                        progress
                    }
                }"
            };

            var response = await Http.PostAsJsonAsync("graphql", query);
            response.EnsureSuccessStatusCode();

            var result = await response.Content.ReadFromJsonAsync<GraphQLResponse>();
            FeaturedBook = result?.Data?.Books.FirstOrDefault();

            // Debugging Output
            Console.WriteLine($"Fetched Book: {FeaturedBook?.Title ?? "No books found"}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching featured book: {ex.Message}");
        }
    }

    public class GraphQLResponse
    {
        public BooksData? Data { get; set; }
    }

    public class BooksData
    {
        public List<Book> Books { get; set; } = new();
    }
}
