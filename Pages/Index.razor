@page "/"
@inject HttpClient Http
@using BlazorGraphQL.Models

<div class="home-container">
    <h1 class="text-center">📚 My Library & Anti-Library</h1>
    <p class="text-center subtitle">
        "Read books are far less valuable than unread ones. Your library should contain as much of what you do not know as your financial means allow for."
        <br>— Nassim Nicholas Taleb, *The Black Swan*
    </p>

    <p class="text-center">
        Welcome to my personal book collection—part **Library**, part **Anti-Library**.
        The **Library** consists of books I have read and studied, while the **Anti-Library** represents the vast knowledge I have yet to explore.
    </p>

    @if (ErrorMessage is not null)
    {
        <p class="text-danger">⚠️ @ErrorMessage</p>
    }

    @if (FeaturedBook is not null)
    {
        <div class="featured-book card">
            <div class="card-body">
                <h4 class="card-title fw-bold text-primary">📌 Featured Book</h4>
                <h5 class="fw-bold">@FeaturedBook!.Title</h5>
                <p class="text-muted"><i>by @FeaturedBook!.Author</i></p>

                <p><span class="badge bg-info">@FeaturedBook!.Category</span></p>
                <p><span class="badge bg-warning">@FeaturedBook!.Status</span></p>

                <div class="progress mt-3">
                    <div class="progress-bar progress-bar-striped progress-bar-animated bg-success"
                         role="progressbar"
                         style="@($"width: {Math.Max(FeaturedBook!.Progress, 5)}%; min-width: 5px;")"
                         aria-valuenow="@FeaturedBook!.Progress"
                         aria-valuemin="0"
                         aria-valuemax="100">
                        @($"{FeaturedBook!.Progress * 100}%")
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <p class="text-center text-warning">⚠️ No books found in the database.</p>
    }

    <!-- 🔥 Recently Added Books -->
    @if (RecentBooks is not null && RecentBooks.Any())
    {
        <div class="mt-5">
            <h4>📖 Recently Added Books</h4>
            <ul class="list-group">
                @foreach (var book in RecentBooks)
                {
                    <li class="list-group-item">
                        <strong>@book.Title</strong> by <i>@book.Author</i>
                    </li>
                }
            </ul>
        </div>
    }

    <div class="text-center mt-4">
        <a href="/add-book" class="btn btn-success btn-lg">➕ Add a New Book</a>
    </div>
</div>

@code {
    private Book? FeaturedBook;
    private List<Book> RecentBooks = new();
    private string? ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var query = new
            {
                query = @"
    {
        books(order: { id: DESC }, limit: 3) {
            id
            title
            author
            category
            status
            progress
        }
    }"
            };


            var response = await Http.PostAsJsonAsync("graphql", query);

            // Debugging: Print the raw response
            var jsonResponse = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"GraphQL Response: {jsonResponse}");

            response.EnsureSuccessStatusCode();

            var result = await response.Content.ReadFromJsonAsync<GraphQLResponse>();

            if (result?.Data?.Books is { Count: > 0 })
            {
                FeaturedBook = result.Data.Books.FirstOrDefault();
                RecentBooks = result.Data.Books.Skip(1).ToList();
            }
            else
            {
                ErrorMessage = "No books found in the database.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error fetching books: {ex.Message}";
            Console.WriteLine(ErrorMessage);
        }
    }


    public class GraphQLResponse
    {
        public BooksData? Data { get; set; }
    }

    public class BooksData
    {
        public List<Book> Books { get; set; } = new();
    }
}
