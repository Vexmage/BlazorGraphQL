@using BlazorGraphQL.Models

@page "/books"
@inject HttpClient Http

<h2 class="text-center mt-4">📚 Book Collection</h2>

@if (books == null)
{
    <p class="text-center text-muted">Loading...</p>
}
else if (!books.Any())
{
    <p class="text-center text-muted">No books found.</p>
}
else
{
    <div class="container mt-4">
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            @foreach (var book in books)
            {
                <div class="col">
                    <div class="card h-100 shadow-lg border-0">
                        <div class="card-body">
                            <h5 class="card-title fw-bold text-primary">@book.Title</h5>
                            <p class="card-text text-muted"><i>by @book.Author</i></p>
                            <p><span class="badge bg-info">@book.Category</span></p>
                            <p><span class="badge bg-warning">@book.Status</span></p>

                            <div class="progress mt-3">
                                <div class="progress-bar bg-success" role="progressbar"
                                     style="@($"width: {Math.Max(book.Progress, 5)}%; min-width: 5px;")"
                                     aria-valuenow="@book.Progress"
                                     aria-valuemin="0"
                                     aria-valuemax="100">
                                    @($"{book.Progress * 100}%")
                                </div>
                            </div>
                        </div>
                        <div class="card-footer text-end bg-light border-0">
                            <button class="btn btn-outline-danger btn-sm" @onclick="() => DeleteBook(book.Id)">
                                <i class="bi bi-trash"></i> Delete
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

}

@code {
    private List<Book>? books;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var query = new
            {
                query = @"
    {
        books(order: { title: ASC }) {   # Sort books alphabetically
            id
            title
            author
            category
            status
            progress
        }
    }"
            };

            var response = await Http.PostAsJsonAsync("graphql", query);
            response.EnsureSuccessStatusCode();

            var result = await response.Content.ReadFromJsonAsync<GraphQLResponse>();
            books = result?.Data?.Books ?? new List<Book>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching books: {ex.Message}");
        }
    }

    private async Task DeleteBook(int bookId)
    {
        var mutation = new
        {
            query = $@"
            mutation {{
                deleteBook(id: {bookId}) {{
                    id
                }}
            }}"
        };

        try
        {
            var response = await Http.PostAsJsonAsync("graphql", mutation);
            response.EnsureSuccessStatusCode();

            // ✅ Ensure UI updates properly after deletion
            books = books?.Where(b => b.Id != bookId).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting book: {ex.Message}");
        }
    }

    public class GraphQLResponse
    {
        public BooksData? Data { get; set; }
    }

    public class BooksData
    {
        public List<Book> Books { get; set; } = new();
    }
}
