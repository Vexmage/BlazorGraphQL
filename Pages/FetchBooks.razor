@using BlazorGraphQL.Models

@page "/books"
@inject HttpClient Http

<h2 class="text-center mt-4">📚 Book Collection</h2>

@if (books == null)
{
    <p class="text-center text-muted">Loading...</p>
}
else if (!books.Any())
{
    <p class="text-center text-muted">No books found.</p>
}
else
{
    <div class="container mt-4">
        <div class="row">
            @foreach (var book in books)
            {
                <div class="col-md-4 mb-3">
                    <div class="card shadow-sm">
                        <div class="card-body">
                            <h5 class="card-title">@book.Title</h5>
                            <p class="card-text text-muted">by @book.Author</p>
                            <p><strong>Category:</strong> @book.Category</p>
                            <p><strong>Status:</strong> @book.Status</p>

                        <div class="progress">
                            <div class="progress-bar" role="progressbar"
                                 style="width: @(book.Progress > 0 ? book.Progress : 1)%;" 
                                 aria-valuenow="@book.Progress"
                                 aria-valuemin="0"
                                 aria-valuemax="100">
                                @($"{book.Progress}%")
                            </div>
                        </div>


                            <button class="btn btn-sm btn-danger mt-2" @onclick="() => DeleteBook(book.Id)">🗑 Delete</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private List<Book>? books;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var query = new
            {
                query = @"
                {
                    books {
                        id
                        title
                        author
                        category
                        status
                        progress
                        reflectionNotes
                    }
                }"
            };

            var response = await Http.PostAsJsonAsync("graphql", query);
            response.EnsureSuccessStatusCode();

            var result = await response.Content.ReadFromJsonAsync<GraphQLResponse>();
            books = result?.Data?.Books ?? new List<Book>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching books: {ex.Message}");
        }
    }

    private async Task DeleteBook(int bookId)
    {
        var mutation = new
        {
            query = $@"
            mutation {{
                deleteBook(id: {bookId}) {{
                    id
                }}
            }}"
        };

        try
        {
            var response = await Http.PostAsJsonAsync("graphql", mutation);
            response.EnsureSuccessStatusCode();

            // ✅ Ensure UI updates properly after deletion
            books = books?.Where(b => b.Id != bookId).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting book: {ex.Message}");
        }
    }

    public class GraphQLResponse
    {
        public BooksData? Data { get; set; }
    }

    public class BooksData
    {
        public List<Book> Books { get; set; } = new();
    }
}
